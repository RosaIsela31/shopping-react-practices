{"version":3,"sources":["components/Header.js","components/Footer.js","components/Product.js","components/Car.js","App.js","Principal.js","serviceWorker.js","index.js"],"names":["Header","title","Footer","date","Product","product","car","setCar","products","name","price","id","className","onClick","items","filter","item","ProductSelected","ProductDeleted","Car","length","map","key","App","useState","year","Date","getFullYear","Principal","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAQeA,EANA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACE,4BAAKA,ICIMC,EANA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChB,OACE,oEAA4CA,I,QCoCjCC,G,MArCC,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAehCC,EAAmBJ,EAAnBI,KAAMC,EAAaL,EAAbK,MAAOC,EAAMN,EAANM,GAEpB,OACE,yBAAKC,UAAU,eACb,4BAAKH,GACL,+BAAKC,GAGHF,EAGE,4BAAQK,QAAS,YAxBD,SAACF,GACvB,IAAMG,EAAQN,EAASO,QAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,KAAI,GACtDJ,EAAO,GAAD,mBACDD,GADC,CAEJQ,KAoB4BG,CAAgBN,IAAMC,UAAU,WAAxD,WAIA,4BAAQC,QAAS,YApBF,SAACF,GACtB,IAAMG,EAAQR,EAAIS,QAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,KAC7CJ,EAAOO,GAkBuBI,CAAeP,IAAMC,UAAU,WAAvD,eCNKO,EAvBH,SAAC,GAAqB,IAAnBb,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OAClB,OACE,yBAAKK,UAAU,OACb,qDAEiB,IAAfN,EAAIc,OAEF,6DAEAd,EAAIe,KAAI,SAAAL,GAAI,OACV,kBAAC,EAAD,CACEM,IAAKN,EAAKL,GACVN,QAASW,EACTV,IAAKA,EACLC,OAAQA,SC4BPgB,MAvCf,WAAe,MAEmBC,mBAAS,CACvC,CAACb,GAAI,EAAGF,KAAM,QAASC,MAAO,IAC9B,CAACC,GAAI,EAAGF,KAAM,UAAWC,MAAO,KAChC,CAACC,GAAI,EAAGF,KAAM,aAAcC,MAAO,IACnC,CAACC,GAAI,EAAGF,KAAM,cAAYC,MAAO,OANtB,mBAENF,EAFM,aASSgB,mBAAS,KATlB,mBASNlB,EATM,KASDC,EATC,KAWPkB,GAAO,IAAIC,MAAOC,cAExB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACE1B,MAAM,mBAER,kDACCO,EAASa,KAAI,SAAAhB,GAAO,OACjB,kBAAC,EAAD,CACEiB,IAAKjB,EAAQM,GACbN,QAASA,EACTC,IAAKA,EACLC,OAAQA,EACRC,SAAUA,OAGhB,kBAAC,EAAD,CACEF,IAAKA,EACLC,OAAQA,IAEV,kBAAC,EAAD,CACEJ,KAAMsB,MC3BCG,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWP,MCIbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD8HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.007ba2ac.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = ({ title }) => {\n  return ( \n    <h1>{title}</h1>\n   );\n}\n \nexport default Header;","import React from 'react'\n\nconst Footer = ({ date }) => {\n  return ( \n    <div>Todos los derechos reservados &copy;, {date}</div>\n   );\n}\n \nexport default Footer;","import React from 'react'\nimport './style.css';\n\nconst Product = ({ product, car, setCar, products }) => {\n\n  const ProductSelected = (id) => {\n    const items = products.filter(item => item.id === id)[0];\n    setCar([\n      ...car,\n      items\n    ]);\n  }\n\n  const ProductDeleted = (id) => {\n    const items = car.filter(item => item.id !== id);\n    setCar(items)\n  }\n\n  const {name, price, id} = product;\n\n  return ( \n    <div className='product-div'>\n      <h3>{name}</h3>\n      <p>${price}</p>\n\n      {\n        products\n        ?\n        ( \n          <button onClick={() => {ProductSelected(id)}} className='btn-buy'>Comprar</button>\n        )\n        :\n        (\n          <button onClick={() => {ProductDeleted(id)}} className='btn-buy'>Eliminar</button>\n        )\n      }\n    </div>\n   );\n}\n \nexport default Product;","import React from 'react'\nimport Product from './Product'\nimport './style.css'\n\nconst Car = ({ car, setCar }) => {\n  return ( \n    <div className='car'>\n      <h2>Tu carrito de compras</h2>\n      {\n        car.length === 0\n        ?\n          <p>No hay elementos en el carrito</p>\n        :\n          car.map(item => (\n            <Product \n              key={item.id}\n              product={item}\n              car={car}\n              setCar={setCar}\n            />\n          ))\n      }\n      \n    </div>\n   );\n}\n \nexport default Car;","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Product from './components/Product';\nimport Car from './components/Car';\n\n\nfunction App() {\n  // Creating product list\n  const [products, setProducts] = useState([\n    {id: 1, name: 'falda', price: 50},\n    {id: 2, name: 'vestido', price: 120},\n    {id: 3, name: 'zapatillas', price: 80},\n    {id: 4, name: 'pantal√≥n', price: 100}\n  ]);\n\n  const [car, setCar] = useState([]);\n\n  const year = new Date().getFullYear();\n\n  return (\n    <Fragment>\n      <Header \n        title='Tienda virtual'\n      />\n      <h3>Lista de Productos</h3>\n      {products.map(product => \n          <Product \n            key={product.id}\n            product={product}\n            car={car}\n            setCar={setCar}\n            products={products}\n          />\n        )}\n      <Car  \n        car={car}\n        setCar={setCar}\n      />\n      <Footer\n        date={year} \n      />\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport App from './App'\n\nfunction Principal () {\n  return ( \n    <BrowserRouter>\n      <Route path='/' component={App} />\n    </BrowserRouter>\n   );\n}\n \nexport default Principal;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Principal from './Principal'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Principal />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}